name: build-arm64

on:
#  schedule:
#    - cron: '0 10 * * *' # everyday at 10am

#  pull_request:
#  push:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'

jobs:
  build:
    runs-on: ${{ matrix.host }}
    strategy:
      matrix:
        host: [
          "ubuntu-latest",
          #"macos-10.15",
        ]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2.3.4
        with:
          submodules: true
      - name: Run pimod OpenWRT example
        uses: Natur40/pimod@v0.2.1
        with:
          pifile: arm64.Pifile
      -
        name: "upload build.log"
        uses: actions/upload-artifact@v2
        with:
          name: build.log.${{ matrix.host }}
          path: ./pi-gen/deploy/build.log
        if: ${{ always() }}
      - 
        name: Upload build artifacts 
        id: upload_deploy
        uses: actions/upload-artifact@v2
        with:
          name: pi-gen.${{ matrix.host }}
          path: |
            ./pi-gen/deploy/*.zip
            ./pi-gen/deploy/*.info
#  release:
#    needs: [build]
#    if: ${{ success() }}
#    runs-on: ubuntu-latest
#    steps:
#      - 
#        name: Create Release
#        id: create_release
#        uses: actions/create-release@v1.1.4
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: ${{ github.event.inputs.version }}
#          release_name: Release ${{ github.event.inputs.version }}
#          draft: true
#          prerelease: true
#      - 
#        name: Download artifact
#        uses: actions/download-artifact@v2
#        with:
#          name: deploy
#      - 
#        name: Get Release File Name & Upload URL
#        id: get_release_info
#        run: |
#          ARTIFACT_PATHNAME=$(ls *.zip | head -n 1)
#          ARTIFACT_NAME=$(basename $ARTIFACT_PATHNAME)
#          echo ::set-output name=artifact_filename::${ARTIFACT_NAME}
#          echo ::set-output name=artifact_path::${ARTIFACT_PATHNAME}
#      - 
#        name: Upload Release Asset
#        id: upload-release-asset
#        uses: actions/upload-release-asset@v1.0.2
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
#          asset_path: ${{ steps.get_release_info.outputs.artifact_path }}
#          asset_name: ${{ steps.get_release_info.outputs.artifact_filename }}
#          asset_content_type: application/zip
